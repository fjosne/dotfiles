## Flags
# A = Auto-expand
# b = only expand on beginning of line
# w = expand at word boundaries
global !p
# Check if in math environment
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'


def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

snippet beg "Environment" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

# Inline math
snippet mk "Math" wA
\\(${1}\\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# Displayed math
snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# Easy fractions
context "math()"
snippet / "Fraction" iA
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

